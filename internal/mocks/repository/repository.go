// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "dynamic-user-segmentation/internal/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockActions is a mock of Actions interface.
type MockActions struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMockRecorder
}

// MockActionsMockRecorder is the mock recorder for MockActions.
type MockActionsMockRecorder struct {
	mock *MockActions
}

// NewMockActions creates a new mock instance.
func NewMockActions(ctrl *gomock.Controller) *MockActions {
	mock := &MockActions{ctrl: ctrl}
	mock.recorder = &MockActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActions) EXPECT() *MockActionsMockRecorder {
	return m.recorder
}

// CreateAction mocks base method.
func (m *MockActions) CreateAction(ctx context.Context, action string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", ctx, action)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockActionsMockRecorder) CreateAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockActions)(nil).CreateAction), ctx, action)
}

// DeleteAction mocks base method.
func (m *MockActions) DeleteAction(ctx context.Context, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockActionsMockRecorder) DeleteAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockActions)(nil).DeleteAction), ctx, action)
}

// GetIdByAction mocks base method.
func (m *MockActions) GetIdByAction(ctx context.Context, action string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdByAction", ctx, action)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdByAction indicates an expected call of GetIdByAction.
func (mr *MockActionsMockRecorder) GetIdByAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdByAction", reflect.TypeOf((*MockActions)(nil).GetIdByAction), ctx, action)
}

// MockConsumers is a mock of Consumers interface.
type MockConsumers struct {
	ctrl     *gomock.Controller
	recorder *MockConsumersMockRecorder
}

// MockConsumersMockRecorder is the mock recorder for MockConsumers.
type MockConsumersMockRecorder struct {
	mock *MockConsumers
}

// NewMockConsumers creates a new mock instance.
func NewMockConsumers(ctrl *gomock.Controller) *MockConsumers {
	mock := &MockConsumers{ctrl: ctrl}
	mock.recorder = &MockConsumersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumers) EXPECT() *MockConsumersMockRecorder {
	return m.recorder
}

// AddSegmentToConsumer mocks base method.
func (m *MockConsumers) AddSegmentToConsumer(ctx context.Context, id, segmentId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSegmentToConsumer", ctx, id, segmentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSegmentToConsumer indicates an expected call of AddSegmentToConsumer.
func (mr *MockConsumersMockRecorder) AddSegmentToConsumer(ctx, id, segmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSegmentToConsumer", reflect.TypeOf((*MockConsumers)(nil).AddSegmentToConsumer), ctx, id, segmentId)
}

// CreateConsumer mocks base method.
func (m *MockConsumers) CreateConsumer(ctx context.Context, consumerId, segmentId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, consumerId, segmentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockConsumersMockRecorder) CreateConsumer(ctx, consumerId, segmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockConsumers)(nil).CreateConsumer), ctx, consumerId, segmentId)
}

// DeleteConsumer mocks base method.
func (m *MockConsumers) DeleteConsumer(ctx context.Context, consumerId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, consumerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockConsumersMockRecorder) DeleteConsumer(ctx, consumerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockConsumers)(nil).DeleteConsumer), ctx, consumerId)
}

// DeleteSegmentFromConsumer mocks base method.
func (m *MockConsumers) DeleteSegmentFromConsumer(ctx context.Context, consumerId int, segmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentFromConsumer", ctx, consumerId, segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentFromConsumer indicates an expected call of DeleteSegmentFromConsumer.
func (mr *MockConsumersMockRecorder) DeleteSegmentFromConsumer(ctx, consumerId, segmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentFromConsumer", reflect.TypeOf((*MockConsumers)(nil).DeleteSegmentFromConsumer), ctx, consumerId, segmentName)
}

// GetAllSegmentsByConsumerId mocks base method.
func (m *MockConsumers) GetAllSegmentsByConsumerId(ctx context.Context, consumerId int) ([]entity.ComplexConsumerSegments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSegmentsByConsumerId", ctx, consumerId)
	ret0, _ := ret[0].([]entity.ComplexConsumerSegments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSegmentsByConsumerId indicates an expected call of GetAllSegmentsByConsumerId.
func (mr *MockConsumersMockRecorder) GetAllSegmentsByConsumerId(ctx, consumerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSegmentsByConsumerId", reflect.TypeOf((*MockConsumers)(nil).GetAllSegmentsByConsumerId), ctx, consumerId)
}

// GetCountConsumers mocks base method.
func (m *MockConsumers) GetCountConsumers(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountConsumers", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountConsumers indicates an expected call of GetCountConsumers.
func (mr *MockConsumersMockRecorder) GetCountConsumers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountConsumers", reflect.TypeOf((*MockConsumers)(nil).GetCountConsumers), ctx)
}

// GetSegmentsById mocks base method.
func (m *MockConsumers) GetSegmentsById(ctx context.Context, consumerId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentsById", ctx, consumerId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentsById indicates an expected call of GetSegmentsById.
func (mr *MockConsumersMockRecorder) GetSegmentsById(ctx, consumerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentsById", reflect.TypeOf((*MockConsumers)(nil).GetSegmentsById), ctx, consumerId)
}

// MockConsumersSegments is a mock of ConsumersSegments interface.
type MockConsumersSegments struct {
	ctrl     *gomock.Controller
	recorder *MockConsumersSegmentsMockRecorder
}

// MockConsumersSegmentsMockRecorder is the mock recorder for MockConsumersSegments.
type MockConsumersSegmentsMockRecorder struct {
	mock *MockConsumersSegments
}

// NewMockConsumersSegments creates a new mock instance.
func NewMockConsumersSegments(ctrl *gomock.Controller) *MockConsumersSegments {
	mock := &MockConsumersSegments{ctrl: ctrl}
	mock.recorder = &MockConsumersSegmentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumersSegments) EXPECT() *MockConsumersSegmentsMockRecorder {
	return m.recorder
}

// AddConsumerSegment mocks base method.
func (m *MockConsumersSegments) AddConsumerSegment(ctx context.Context, segmentId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConsumerSegment", ctx, segmentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConsumerSegment indicates an expected call of AddConsumerSegment.
func (mr *MockConsumersSegmentsMockRecorder) AddConsumerSegment(ctx, segmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConsumerSegment", reflect.TypeOf((*MockConsumersSegments)(nil).AddConsumerSegment), ctx, segmentId)
}

// AddConsumerSegmentTTL mocks base method.
func (m *MockConsumersSegments) AddConsumerSegmentTTL(ctx context.Context, segmentId int, TTL time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConsumerSegmentTTL", ctx, segmentId, TTL)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConsumerSegmentTTL indicates an expected call of AddConsumerSegmentTTL.
func (mr *MockConsumersSegmentsMockRecorder) AddConsumerSegmentTTL(ctx, segmentId, TTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConsumerSegmentTTL", reflect.TypeOf((*MockConsumersSegments)(nil).AddConsumerSegmentTTL), ctx, segmentId, TTL)
}

// DeleteConsumerSegment mocks base method.
func (m *MockConsumersSegments) DeleteConsumerSegment(ctx context.Context, consumerId int, segmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumerSegment", ctx, consumerId, segmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumerSegment indicates an expected call of DeleteConsumerSegment.
func (mr *MockConsumersSegmentsMockRecorder) DeleteConsumerSegment(ctx, consumerId, segmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumerSegment", reflect.TypeOf((*MockConsumersSegments)(nil).DeleteConsumerSegment), ctx, consumerId, segmentName)
}

// DeleteExpiredTTL mocks base method.
func (m *MockConsumersSegments) DeleteExpiredTTL(ctx context.Context, consumerId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredTTL", ctx, consumerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredTTL indicates an expected call of DeleteExpiredTTL.
func (mr *MockConsumersSegmentsMockRecorder) DeleteExpiredTTL(ctx, consumerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredTTL", reflect.TypeOf((*MockConsumersSegments)(nil).DeleteExpiredTTL), ctx, consumerId)
}

// GetSegmentIdById mocks base method.
func (m *MockConsumersSegments) GetSegmentIdById(ctx context.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentIdById", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentIdById indicates an expected call of GetSegmentIdById.
func (mr *MockConsumersSegmentsMockRecorder) GetSegmentIdById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentIdById", reflect.TypeOf((*MockConsumersSegments)(nil).GetSegmentIdById), ctx, id)
}

// UpdateSegmentTTL mocks base method.
func (m *MockConsumersSegments) UpdateSegmentTTL(ctx context.Context, consumerId int, segmentName string, TTL time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegmentTTL", ctx, consumerId, segmentName, TTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegmentTTL indicates an expected call of UpdateSegmentTTL.
func (mr *MockConsumersSegmentsMockRecorder) UpdateSegmentTTL(ctx, consumerId, segmentName, TTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegmentTTL", reflect.TypeOf((*MockConsumersSegments)(nil).UpdateSegmentTTL), ctx, consumerId, segmentName, TTL)
}

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// AddOperation mocks base method.
func (m *MockOperations) AddOperation(ctx context.Context, consumerId, segmentId, actionId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOperation", ctx, consumerId, segmentId, actionId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOperation indicates an expected call of AddOperation.
func (mr *MockOperationsMockRecorder) AddOperation(ctx, consumerId, segmentId, actionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperation", reflect.TypeOf((*MockOperations)(nil).AddOperation), ctx, consumerId, segmentId, actionId)
}

// GetOperationsInTime mocks base method.
func (m *MockOperations) GetOperationsInTime(ctx context.Context, consumerId int, start, end time.Time) ([]entity.ComplexOperations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsInTime", ctx, consumerId, start, end)
	ret0, _ := ret[0].([]entity.ComplexOperations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsInTime indicates an expected call of GetOperationsInTime.
func (mr *MockOperationsMockRecorder) GetOperationsInTime(ctx, consumerId, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsInTime", reflect.TypeOf((*MockOperations)(nil).GetOperationsInTime), ctx, consumerId, start, end)
}

// MockSegments is a mock of Segments interface.
type MockSegments struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentsMockRecorder
}

// MockSegmentsMockRecorder is the mock recorder for MockSegments.
type MockSegmentsMockRecorder struct {
	mock *MockSegments
}

// NewMockSegments creates a new mock instance.
func NewMockSegments(ctrl *gomock.Controller) *MockSegments {
	mock := &MockSegments{ctrl: ctrl}
	mock.recorder = &MockSegmentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegments) EXPECT() *MockSegmentsMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegments) CreateSegment(ctx context.Context, segment string, percent float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, segment, percent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentsMockRecorder) CreateSegment(ctx, segment, percent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegments)(nil).CreateSegment), ctx, segment, percent)
}

// DeleteSegment mocks base method.
func (m *MockSegments) DeleteSegment(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentsMockRecorder) DeleteSegment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegments)(nil).DeleteSegment), ctx, id)
}

// GetAllSegments mocks base method.
func (m *MockSegments) GetAllSegments(ctx context.Context) ([]entity.Segments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSegments", ctx)
	ret0, _ := ret[0].([]entity.Segments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSegments indicates an expected call of GetAllSegments.
func (mr *MockSegmentsMockRecorder) GetAllSegments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSegments", reflect.TypeOf((*MockSegments)(nil).GetAllSegments), ctx)
}

// GetIdBySegment mocks base method.
func (m *MockSegments) GetIdBySegment(ctx context.Context, segment string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdBySegment", ctx, segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdBySegment indicates an expected call of GetIdBySegment.
func (mr *MockSegmentsMockRecorder) GetIdBySegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdBySegment", reflect.TypeOf((*MockSegments)(nil).GetIdBySegment), ctx, segment)
}

// GetSegmentById mocks base method.
func (m *MockSegments) GetSegmentById(ctx context.Context, id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentById", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentById indicates an expected call of GetSegmentById.
func (mr *MockSegmentsMockRecorder) GetSegmentById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentById", reflect.TypeOf((*MockSegments)(nil).GetSegmentById), ctx, id)
}

// UpdateSegment mocks base method.
func (m *MockSegments) UpdateSegment(ctx context.Context, id int, percent float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", ctx, id, percent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentsMockRecorder) UpdateSegment(ctx, id, percent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegments)(nil).UpdateSegment), ctx, id, percent)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsers) CreateUser(ctx context.Context, user entity.Users) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsers)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUsers) DeleteUser(ctx context.Context, user entity.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersMockRecorder) DeleteUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsers)(nil).DeleteUser), ctx, user)
}

// GetIdByUsername mocks base method.
func (m *MockUsers) GetIdByUsername(ctx context.Context, username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdByUsername", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdByUsername indicates an expected call of GetIdByUsername.
func (mr *MockUsersMockRecorder) GetIdByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdByUsername", reflect.TypeOf((*MockUsers)(nil).GetIdByUsername), ctx, username)
}

// GetUserByID mocks base method.
func (m *MockUsers) GetUserByID(ctx context.Context, id int) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUsersMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsers)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockUsers) GetUserByUsername(ctx context.Context, username string) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUsersMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUsers)(nil).GetUserByUsername), ctx, username)
}
