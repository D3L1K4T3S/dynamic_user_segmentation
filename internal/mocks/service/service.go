// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	dto "dynamic-user-segmentation/internal/service/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActions is a mock of Actions interface.
type MockActions struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMockRecorder
}

// MockActionsMockRecorder is the mock recorder for MockActions.
type MockActionsMockRecorder struct {
	mock *MockActions
}

// NewMockActions creates a new mock instance.
func NewMockActions(ctrl *gomock.Controller) *MockActions {
	mock := &MockActions{ctrl: ctrl}
	mock.recorder = &MockActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActions) EXPECT() *MockActionsMockRecorder {
	return m.recorder
}

// CreateAction mocks base method.
func (m *MockActions) CreateAction(ctx context.Context, action dto.ActionsRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", ctx, action)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockActionsMockRecorder) CreateAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockActions)(nil).CreateAction), ctx, action)
}

// DeleteAction mocks base method.
func (m *MockActions) DeleteAction(ctx context.Context, action dto.ActionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockActionsMockRecorder) DeleteAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockActions)(nil).DeleteAction), ctx, action)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, au dto.AuthUser) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, au)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, au interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, au)
}

// DeleteUser mocks base method.
func (m *MockAuth) DeleteUser(ctx context.Context, au dto.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, au)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthMockRecorder) DeleteUser(ctx, au interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuth)(nil).DeleteUser), ctx, au)
}

// GenerateToken mocks base method.
func (m *MockAuth) GenerateToken(ctx context.Context, user dto.AuthUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthMockRecorder) GenerateToken(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuth)(nil).GenerateToken), ctx, user)
}

// ParseToken mocks base method.
func (m *MockAuth) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuth)(nil).ParseToken), token)
}

// MockConsumers is a mock of Consumers interface.
type MockConsumers struct {
	ctrl     *gomock.Controller
	recorder *MockConsumersMockRecorder
}

// MockConsumersMockRecorder is the mock recorder for MockConsumers.
type MockConsumersMockRecorder struct {
	mock *MockConsumers
}

// NewMockConsumers creates a new mock instance.
func NewMockConsumers(ctrl *gomock.Controller) *MockConsumers {
	mock := &MockConsumers{ctrl: ctrl}
	mock.recorder = &MockConsumersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumers) EXPECT() *MockConsumersMockRecorder {
	return m.recorder
}

// AddSegmentsToConsumer mocks base method.
func (m *MockConsumers) AddSegmentsToConsumer(ctx context.Context, consumer dto.ConsumerRequest) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSegmentsToConsumer", ctx, consumer)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSegmentsToConsumer indicates an expected call of AddSegmentsToConsumer.
func (mr *MockConsumersMockRecorder) AddSegmentsToConsumer(ctx, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSegmentsToConsumer", reflect.TypeOf((*MockConsumers)(nil).AddSegmentsToConsumer), ctx, consumer)
}

// CreateConsumer mocks base method.
func (m *MockConsumers) CreateConsumer(ctx context.Context, consumer dto.ConsumerRequest) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, consumer)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockConsumersMockRecorder) CreateConsumer(ctx, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockConsumers)(nil).CreateConsumer), ctx, consumer)
}

// DeleteSegmentsFromConsumer mocks base method.
func (m *MockConsumers) DeleteSegmentsFromConsumer(ctx context.Context, consumer dto.ConsumerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentsFromConsumer", ctx, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentsFromConsumer indicates an expected call of DeleteSegmentsFromConsumer.
func (mr *MockConsumersMockRecorder) DeleteSegmentsFromConsumer(ctx, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentsFromConsumer", reflect.TypeOf((*MockConsumers)(nil).DeleteSegmentsFromConsumer), ctx, consumer)
}

// GetConsumerSegments mocks base method.
func (m *MockConsumers) GetConsumerSegments(ctx context.Context, consumer dto.ConsumerId) (dto.ConsumerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerSegments", ctx, consumer)
	ret0, _ := ret[0].(dto.ConsumerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerSegments indicates an expected call of GetConsumerSegments.
func (mr *MockConsumersMockRecorder) GetConsumerSegments(ctx, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerSegments", reflect.TypeOf((*MockConsumers)(nil).GetConsumerSegments), ctx, consumer)
}

// UpdateSegmentsTTL mocks base method.
func (m *MockConsumers) UpdateSegmentsTTL(ctx context.Context, consumer dto.ConsumerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegmentsTTL", ctx, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegmentsTTL indicates an expected call of UpdateSegmentsTTL.
func (mr *MockConsumersMockRecorder) UpdateSegmentsTTL(ctx, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegmentsTTL", reflect.TypeOf((*MockConsumers)(nil).UpdateSegmentsTTL), ctx, consumer)
}

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// GetHistoryForPeriod mocks base method.
func (m *MockOperations) GetHistoryForPeriod(ctx context.Context, request dto.OperationsRequest) (dto.OperationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryForPeriod", ctx, request)
	ret0, _ := ret[0].(dto.OperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryForPeriod indicates an expected call of GetHistoryForPeriod.
func (mr *MockOperationsMockRecorder) GetHistoryForPeriod(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryForPeriod", reflect.TypeOf((*MockOperations)(nil).GetHistoryForPeriod), ctx, request)
}

// GetReportFile mocks base method.
func (m *MockOperations) GetReportFile(ctx context.Context, request dto.OperationsRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportFile", ctx, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportFile indicates an expected call of GetReportFile.
func (mr *MockOperationsMockRecorder) GetReportFile(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportFile", reflect.TypeOf((*MockOperations)(nil).GetReportFile), ctx, request)
}

// MockSegments is a mock of Segments interface.
type MockSegments struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentsMockRecorder
}

// MockSegmentsMockRecorder is the mock recorder for MockSegments.
type MockSegmentsMockRecorder struct {
	mock *MockSegments
}

// NewMockSegments creates a new mock instance.
func NewMockSegments(ctrl *gomock.Controller) *MockSegments {
	mock := &MockSegments{ctrl: ctrl}
	mock.recorder = &MockSegmentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegments) EXPECT() *MockSegmentsMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegments) CreateSegment(ctx context.Context, segment dto.SegmentsRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentsMockRecorder) CreateSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegments)(nil).CreateSegment), ctx, segment)
}

// DeleteSegment mocks base method.
func (m *MockSegments) DeleteSegment(ctx context.Context, segment dto.SegmentsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentsMockRecorder) DeleteSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegments)(nil).DeleteSegment), ctx, segment)
}

// GetAllSegments mocks base method.
func (m *MockSegments) GetAllSegments(ctx context.Context) ([]dto.SegmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSegments", ctx)
	ret0, _ := ret[0].([]dto.SegmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSegments indicates an expected call of GetAllSegments.
func (mr *MockSegmentsMockRecorder) GetAllSegments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSegments", reflect.TypeOf((*MockSegments)(nil).GetAllSegments), ctx)
}

// UpdateSegment mocks base method.
func (m *MockSegments) UpdateSegment(ctx context.Context, segment dto.SegmentsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentsMockRecorder) UpdateSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegments)(nil).UpdateSegment), ctx, segment)
}
